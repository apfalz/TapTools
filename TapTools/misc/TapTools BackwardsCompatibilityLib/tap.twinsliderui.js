/*A dual slider using imagesOutputs 0. to 1.Code by: Jesse Allison*/// CONSTANTSconst TWINSLIDERUI_VERSION = 2;sketch.default2d();var vbrgb = [1.,1.,1.];var pixClick = 0;				// pixel value when clicked & draggedvar whichSlider = -1;			// which slider is being draggedvar topVal = 0.;				// top and bottom slider valuesvar bottomVal = 0.;var linked = 1;					// link the two sliders togethervar outputMultiplier = 1.;		// default range of 0. to 1.var background = new Image("dualSlider.background.pct");var topKnob = new Image("dualSlider.topKnob.pct");var bottomKnob = new Image("dualSlider.bottomKnob.pct");var backgroundWidth = background.size[0];var backgroundHeight = background.size[1];box.size(backgroundWidth,backgroundHeight);var offset = 8;					// offset in pixels of beginning & end of slidervar knobOffset = topKnob.size[0] / 2;var drawOffset = offset - knobOffset;					// should limit to 0var sliderLength = backgroundWidth - (offset * 2); 			// length in Pixels of slidervar width = box.rect[2] - box.rect[0];var height = box.rect[3] - box.rect[1];var aspect = width/height;// 1st Argument sets multiplierif (jsarguments.length>1)	outputMultiplier = jsarguments[1];draw();refresh();//************************************************************************function draw(){		with (sketch) {		glclearcolor(vbrgb);		glclear();				copypixels(background);				copypixels(topKnob, (sliderLength * topVal) + drawOffset, 0);		copypixels(bottomKnob, (sliderLength * bottomVal) + drawOffset, backgroundHeight / 2);			}}//************************************************************************function bang(){	draw();	refresh();	outlet(0, (topVal * outputMultiplier), (bottomVal* outputMultiplier));}function msg_float(v){	topVal = (v / outputMultiplier);	topVal = Math.min(Math.max(0.,topVal),1.);			if (linked == 1) {		bottomVal = topVal	}			notifyclients();	bang();}function set(which,v)		// sets value w/o output{	if ((which == -1) || (which == "both")) {		topVal = (v / outputMultiplier);		topVal = Math.min(Math.max(0.,topVal),1.);		bottomVal = topVal	}	if ((which == 0) || (which == "top")) {		topVal = (v / outputMultiplier);		topVal = Math.min(Math.max(0.,topVal),1.);	}	if ((which == 1) || (which == "bottom")) {		bottomVal = (v / outputMultiplier);		bottomVal = Math.min(Math.max(0.,bottomVal),1.);	}		draw();	refresh();	}//************************************************************************function imagecalc(){		// must calculate the size of the window and resize accordingly		// find height & width of Background image	backgroundWidth = background.size[0];	backgroundHeight = background.size[1];		box.size(backgroundWidth,backgroundHeight);}function fsaa(v){	sketch.fsaa = v;	bang();}function brgb(r,g,b){	vbrgb[0] = r/255.;	vbrgb[1] = g/255.;	vbrgb[2] = b/255.;	draw();	refresh();}function link(v)				// toggles slider linking on and off{	linked = v;}function multiplier(v)			// sets the multiplier for the output values{	outputMultiplier = v;}function setvalueof(v){	msg_float(v);}function getvalueof(){	return topVal;}//************************************************************************function onclick(x,y,but,cmd,shift,capslock,option,ctrl){										// Check for top or Bottom	whichSlider = -1;					// linked	if (linked == 0) {		whichSlider = 0;				// top slider		if (y > backgroundHeight / 2) {			whichSlider = 1;			// bottom slider		}	}	ondrag(x,y,but,cmd,shift,capslock,option,ctrl)}onclick.local = 1;function ondrag(x,y,but,cmd,shift,capslock,option,ctrl){		switch (whichSlider) {	case -1: 	// Linked						// find pixel location of slider		topVal = (x - offset) / sliderLength;		topVal = Math.min(Math.max(0.,topVal),1.);		bottomVal = topVal;		break;	case 0:		// Top		topVal = (x - offset) / sliderLength;		topVal = Math.min(Math.max(0.,topVal),1.);		break;	case 1:		// Bottom		bottomVal = (x - offset) / sliderLength;		bottomVal = Math.min(Math.max(0.,bottomVal),1.);		break;	}		bang();	}ondrag.local = 1; function onresize(w,h){	box.size(backgroundWidth,backgroundHeight);		draw();	refresh();}onresize.local = 1; //private