/*jsui Javascript File5 X Y positions + dial hold shift to adjust dialADD for loops to initialize any number of dials!*** Change ondrag to make x drag move the selection, y drag adjust the width	Jesse Allison*///// CONSTANTSconst XYDRAGDIALSUI_VERSION = 2;const NO_SELECTION = -1;// CONFIGURATIONinlets = 1outlets = 1sketch.ortho3d();		// Must tell jsui about our context// ASSISTANCE STRINGSsetinletassist(0,"f = val, list = dial,x,y");setoutletassist(0,"List: Dial#,x , y, value");// GLOBALSvar clicked = 0;			// whether the mouse button is down or not.var enableTask = 1;var numDials = 5;var numDivisions = 4;var numSubDivisions = 16;var divisionWidth = 0.25;var subDivisionWidth = 0.0625;var divisionWidthNorm = 0.25;var subDivisionWidthNorm = 0.0625;var divisionColor = [0.,0.,0.,1.];var divisionColorFaded = [0.,0.,0.,0.6];var subDivisionColorFaded = [0.,0.,0.,0.4];var subDivisionColorFaded2 = [0.,0.,0.,0.2];var val = [0.5,0.5,0.5,0.5,0.5];			// Dial position 0:1var vbrgb = [0.5,0.55,0.73,0.3];// var vfrgb = [0.6,0.3,0.2,1.];// var vrgb2 = [0.7,0.7,0.7,1.];var rball = [0.737,0.667,0.667,0.965,0.933];var gball = [0.345,0.761,1.,1.,0.596];var bball = [0.,1.,0.729,0.667,1.];var aball = [1.,1.,1.,1.,1.];var rdial = [0.533,0.,0.02,0.784,0.263];var gdial = [0.,0.278,0.314,0.643,0.];var bdial = [0.051,0.604,0.,0.,0.784];var adial = [1.,1.,1.,1.,1.];var scaledVal = [0,0,0];var mouse_x = 0;var mouse_y = 0;var last_x = 0;var last_y = 0;var dialx = [0.1,0.3,0.5,0.7,0.9];var dialy = [0.1,0.3,0.5,0.7,0.9];var snap = 0;var select = 0;										// number of the ball that is selected [0 to numDials-1]var boxWidth = box.rect[2] - box.rect[0];var boxHeight = box.rect[3] - box.rect[1];var aspect = boxWidth / boxHeight;var onePixelWorld = sketch.screentoworld(1,1);var initRad = 0.1;var rad = initRad + ((boxHeight / 64) * .002);		// scale radius to a decent sizevar myfont = ("Arial");var myfontsize = 9;var scroll = 0.;var colorScroll = [1,1,1,1];// INITIALIZE A NEW INSTANCEinit();// taskMaker();// ** Initialization // ********************************************************************function init(){	if (boxHeight < 64) {						// limit smallest size		rad = 0.1 * (64 / boxHeight);	}	//post("arg 0 = "+ jsarguments[0]+"\n");	//post("arg 1 = "+ jsarguments[1]+"\n");	//post("arg 2 = "+ jsarguments[2]+"\n");	//post("LENGTH = " + jsarguments.length+"\n");	// process arguments	if(jsarguments.length > 1)			// first argument is the js script name		numDials = jsarguments[1];		// set number of dials with argument	// taskMaker();}init.local = 1;		// make this function private// TIM DID THIS !!!!!!!!!!!!!!!function loadbang(){	divisions(numDivisions);	draw();}// ** Task Managing for Drawing // ********************************************************************/*	function taskMaker()	{		var tsk = new Task(draw);		tsk.interval = 60; // every 60 milliseconds		tsk.repeat();		 // tsk.repeat(3);// do it 3 times	}	taskMaker.local = 1;*/function taskMaker()							// automated screen redrawing only while mouse clicked{	if (enableTask) {		var drawTask = new Task(clickedDraw);		drawTask.interval = 100; 					// every 100 milliseconds		drawTask.repeat();	}	enableTask = 0;}taskMaker.local = 1;function clickedDraw()					// redraws the screen while clicked = 1 then shuts off.{	draw();	if (clicked == 0) {						// Trying to turn it off if the mouse isn't depressed.		arguments.callee.task.cancel();		enableTask = 1;			// allow another task to be created		// post("hi \n");	}}/*************************************** * DRAW TO THE JSUI WINDOW ***************************************/function draw(){	var x1,y1,i2,x2;		// 3d sphere	with (sketch) {		shapeslice(40,10);						// SETUP GL Stuff		glcullface("back");			glpolygonmode("front","fill");			glpolygonmode("back","fill");		// erase background		glclearcolor(vbrgb[0],vbrgb[1],vbrgb[2],vbrgb[3]);		glclear();				// glscale(0.05);		for (i = 0; i< numDivisions; i++) {			// DRAW LINES			x2 = (((i * divisionWidth) - aspect) + onePixelWorld);	// main divisions			glcolor(divisionColor);			moveto(x2,1.,0.);			gllinewidth(2.5);			lineto(x2,0.75,0.);			glcolor(divisionColorFaded);			gllinewidth(1.);			lineto(x2,-1.,0.);						moveto((x2 + subDivisionWidth),1.,0.);			glcolor(subDivisionColorFaded);			lineto((x2 + subDivisionWidth),-1.,0.);			moveto(x2 + (3 * subDivisionWidth),1.,0.);			lineto(x2 + (3 * subDivisionWidth),-1.,0.);						glcolor(divisionColor);			gllinewidth(2.0);			moveto(x2 + (2 * subDivisionWidth),1.,0.);			lineto(x2 + (2 * subDivisionWidth),0.8,0.);			glcolor(subDivisionColorFaded2);			gllinewidth(1.0);			lineto(x2 + (2 * subDivisionWidth),-1.,0.);		}				font(myfont);							// TEXT for Dials		fontsize(myfontsize);		textalign("center","center");				// set new position		for (var i = 0; i <= 4; i++) {						x1 = (dialx[i] * (aspect * 2)) - aspect;			// y1 = -1 * ((dialy[i] * 2) - 1);			y1 = ((dialy[i] * 2) - 1);			moveto(x1,y1,0);						// fill bgsphere			glcolor(rball[i],gball[i],bball[i],aball[i]);				// sphere (vertical radius,0?, perimiter, 0?, 90?)			sphere(rad); //,0,360,0,90			// glclear("depth");			glcolor(rdial[i],gdial[i],bdial[i],adial[i]);			sphere(rad*1.2,Math.min(-91,-90-val[i]*360),-90,0,90);						glcolor(0.,0.,0.,1.);			i2 = i + 1;			text(i2.toString());		}				glcolor(colorScroll);		moveto((scroll * 2 * aspect) - (aspect),-1);		lineto((scroll * 2 * aspect) - (aspect),1);	}		refresh();}draw.local = 1;		// make this function private/*************************************** * MAX MESSAGE RESPONDERS ***************************************/// MESSAGE: bangfunction bang(){	// draw(); run by task now	for (i=0; i < numDials; i++) {		outlet(0,(i+1),dialx[i],dialy[i],val[i]);	}}// MESSAGE: floatfunction msg_float(dial,v){	if (inlet = 1)	val[dial] = Math.min(Math.max(0,v),1);	notifyclients();	bang();}// MESSAGE: listfunction list(dial,x,y){	// if (list.length = 3)			// check to see if 3 values in list?/*		x = Math.min(Math.max(0 , x), 1);	y = Math.min(Math.max(0 , y), 1);	dialx[dial] = x;	dialy[dial] = (-1. * y) + 1.;	notifyclients;	bang();*/	}// MESSAGE: Set parameters without outputfunction set(setWhat, number, value){	if (clicked == 0) {				 // only accept input if not clicked		number = number - 1;				switch (setWhat) {		case "dial":			// set pitch1			val[number] = Math.min(Math.max(0. , value), 1.);			//post(dialx[number], dialy[number], val[number], + "\n");			break;		case "height":			dialy[number] = Math.min(Math.max(0. , value), 1.);			break;		case "position":			dialx[number] = Math.min(Math.max(0. , value), 1.);			break;		}		draw();	}}function move(setWhat, number, value){	if (clicked == 0) {				 // only accept input if not clicked		number = number - 1;				switch (setWhat) {		case "dial":			// set pitch1			val[number] = Math.min(Math.max(0. , value), 1.);			//post(dialx[number], dialy[number], val[number], + "\n");			break;		case "height":			dialy[number] = Math.min(Math.max(0. , value), 1.);			break;		case "position":			dialx[number] = Math.min(Math.max(0. , value), 1.);			break;		}		draw();	}	bang();}// MESSAGE: location to place the scrollbar [0.0 to 1.0]function scrollbar(v){	v = Math.min(Math.max(0 , v), 1);	scroll = v;	bang();}// MESSAGE: Turn on or off Snap to Gridfunction snapto(v){	snap = v;}// MESSAGE: sets the number of divisionsfunction divisions(v){	numDivisions = v;	numSubDivisions = (numDivisions * 4);	divisionWidth = (1. / numDivisions) * 2 * aspect;	subDivisionWidth = (1. / (numDivisions * 4)) * 2 * aspect;		divisionWidthNorm = (1. / numDivisions);	subDivisionWidthNorm = (1. / (numDivisions * 4));		// subDivision scaled to 0:1	bang();}/*// MESSAGE: turn off the anti-aliasingfunction fsaa(v){	sketch.fsaa = v;	bang();}*/// MESSAGE: sets the size of all 5 ballsfunction radius(v){	initRad = v	rad = initRad + ((boxHeight / 64) * .002);		// scale radius to a decent size	if (boxHeight < 64) {						// limit smallest size		rad = 0.1 * (64 / boxHeight);	}	// draw();	refresh();}// MESSAGE: sets the color of ball Nfunction ballrgb(n,r,g,b,a){	rball[n] = r/255.;	gball[n] = g/255.;	bball[n] = b/255.;	aball[n] = a/255.;	// draw();	refresh();}// MESSAGE: sets the color of dial (outside casing) Nfunction dialrgb(n,r,g,b,a){	rdial[n] = r/255.;	gdial[n] = g/255.;	bdial[n] = b/255.;	adial[n] = a/255.;	// draw();	refresh();}// MESSAGE: set the background colorfunction brgb(r,g,b,a){	vbrgb[0] = r/255.;	vbrgb[1] = g/255.;	vbrgb[2] = b/255.;	vbrgb[3] = a/255.;	// draw();	refresh();}// PATTR HOOKSfunction setvalueof(dial, v){	msg_float(dial, v);}function getvalueof(v){	return val[v];}/*************************************** * UI RESPONDERS ***************************************/// WHEN THE WINDOW IS RESIZEDfunction onresize(w,h){	boxWidth = w;	boxHeight = h;	aspect = (boxWidth/boxHeight);		rad = initRad + ((boxHeight / 64) * .002);	if (boxHeight < 64) {		rad = 0.1 * (64 / boxHeight);	}		divisions(numDivisions);	// draw();	// refresh();}onresize.local = 1;// MOUSE CLICK RESPONDERfunction onclick(x, y, but, cmd, shift, capslock, option, ctrl)		// ??? Are these labels still valid for windows ???{	clicked = 1;		// turn on screen drawing and off inputs	taskMaker();	select = NO_SELECTION;	mouse_x = x / boxWidth;		// scale to 0:1	mouse_y = (-1. * (y / boxHeight)) + 1.;	// scale and invert to 0:1	last_x = x;	last_y = y;						// check to see what dial it is near					if (mouse_x > (dialx[0]-0.05) && mouse_x < (dialx[0]+0.05) && mouse_y > (dialy[0]-0.05) && mouse_y < (dialy[0]+0.05)) {		// dialx[0] = mouse_x;		// dialy[0] = mouse_y;		select = 0;	}	else if (mouse_x > (dialx[1]-0.05) && mouse_x < (dialx[1]+0.05) && mouse_y > (dialy[1]-0.05) && mouse_y < (dialy[1]+0.05)) {		// dialx[1] = mouse_x;		// dialy[1] = mouse_y;		select = 1;	}	else if (mouse_x > (dialx[2]-0.05) && mouse_x < (dialx[2]+0.05) && mouse_y > (dialy[2]-0.05) && mouse_y < (dialy[2]+0.05)) {		// dialx[2] = mouse_x;		// dialy[2] = mouse_y;		select = 2;	}	else if (mouse_x > (dialx[3]-0.05) && mouse_x < (dialx[3]+0.05) && mouse_y > (dialy[3]-0.05) && mouse_y < (dialy[3]+0.05)) {		// dialx[3] = mouse_x;		// dialy[3] = mouse_y;		select = 3;	}	else if (mouse_x > (dialx[4]-0.05) && mouse_x < (dialx[4]+0.05) && mouse_y > (dialy[4]-0.05) && mouse_y < (dialy[4]+0.05)) {		// dialx[4] = mouse_x;		// dialy[4] = mouse_y;		select = 4;	}		ondrag(x,y);}onclick.local = 1;function ondrag(x, y, but, cmd, shift, capslock, option, ctrl){	var f, dy, grid;	clicked = 1;				// calculate delta movements with shift	if (select != NO_SELECTION) {		if (shift) {				// change val if shift key is down			dy = y - last_y;			f = val[select] - dy * 0.01;			msg_float(select,f); 	//set new value with clipping + refresh						last_x = x;				// cache mouse position for tracking delta movements			last_y = y;					}	else {						// move ball position, not value			scaledVal[0] = x / boxWidth; 		// scaled to 0:1			scaledVal[1] = (-1. * (y / boxHeight)) + 1.; // scaled to 0:1 & inverted						if (snap == 1) {						// is snap to grid on ?				grid = scaledVal[0] / subDivisionWidthNorm;		// find how many divisions over the x value is				gridNum = Math.round(grid);						// Round it ( > 0.5 up, < 0.5 down)				scaledVal[0] = (gridNum * subDivisionWidthNorm);	// snap the x value to the grid.			}						dialx[select] = Math.min(Math.max(0 , scaledVal[0]), 1);			dialy[select] = Math.min(Math.max(0 , scaledVal[1]), 1);						bang();		}	}}ondrag.local = 1;function onidle(x,y,button){	clicked = 0;}onidle.local = 1;function onidleout(x,y,button){	clicked = 0;}onidleout.local = 1;/*function ondblclick(x, y, but, cmd, shift, capslock, option, ctrl){	mouse_x = x;	mouse_y = y;	// disable output?}ondblclick.local = 1;*/